/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_jme3_bullet_util_NativeSoftBodyUtil */

#ifndef _Included_com_jme3_bullet_util_NativeSoftBodyUtil
#define _Included_com_jme3_bullet_util_NativeSoftBodyUtil
#ifdef __cplusplus
extern "C" {
#endif

    /*
     * Class:     com_jme3_bullet_util_NativeSoftBodyUtil
     * Method:    getVertices
     * Signature: (JLcom/jme3/bullet/util/DebugMeshCallback;)V
     */
    JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getVertices
    (JNIEnv *env, jclass clazz, jlong bodyId, jobject callback) {
        btSoftBody* body = reinterpret_cast<btSoftBody*> (bodyId);
        if (body == NULL) {
            jclass newExc = env->FindClass("java/lang/NullPointerException");
            env->ThrowNew(newExc, "The native object does not exist.");
            return;
        }

        btVector3 vertexA, vertexB, vertexC;

        for (int i = 0; i < body->m_faces.size(); i++) {
            const btSoftBody::Face& f = body->m_faces[i];

            // Grab the data for this triangle from the hull
            vertexA = f.m_n[0]->m_x;
            vertexB = f.m_n[1]->m_x;
            vertexC = f.m_n[2]->m_x;


            // Put the vertices into the vertex buffer
            env->CallVoidMethod(callback, jmeClasses::DebugMeshCallback_addVector, vertexA.getX(), vertexA.getY(), vertexA.getZ());
            if (env->ExceptionCheck()) {
                env->Throw(env->ExceptionOccurred());
                return;
            }
            env->CallVoidMethod(callback, jmeClasses::DebugMeshCallback_addVector, vertexB.getX(), vertexB.getY(), vertexB.getZ());
            if (env->ExceptionCheck()) {
                env->Throw(env->ExceptionOccurred());
                return;
            }
            env->CallVoidMethod(callback, jmeClasses::DebugMeshCallback_addVector, vertexC.getX(), vertexC.getY(), vertexC.getZ());
            if (env->ExceptionCheck()) {
                env->Throw(env->ExceptionOccurred());
                return;
            }
        }
    }

    /*
     * Class:     com_jme3_bullet_util_NativeSoftBodyUtil
     * Method:    getIndexes
     * Signature: (JLjava/nio/IntBuffer;)V
     */
    JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getIndexes
    (JNIEnv *env, jclass clazz, jlong bodyId, jobject indexBuffer) {
        btSoftBody* body = reinterpret_cast<btSoftBody*> (bodyId);
        if (body == NULL) {
            jclass newExc = env->FindClass("java/lang/NullPointerException");
            env->ThrowNew(newExc, "The native object does not exist.");
            return;
        }
        jint* indexes = (jint*) env->GetDirectBufferAddress(indexBuffer);

        btSoftBody::Node* firstNode = &body->m_nodes[0];

        for (int i = 0; i < body->m_faces.size(); i++) {
            const btSoftBody::Face& f = body->m_faces[i];
            indexes[i * 3 + 0] = int(f.m_n[0] - firstNode);
            indexes[i * 3 + 1] = int(f.m_n[1] - firstNode);
            indexes[i * 3 + 2] = int(f.m_n[2] - firstNode);
        }

    }

    /*
     * Class:     com_jme3_bullet_util_NativeSoftBodyUtil
     * Method:    getNumTriangle
     * Signature: (J)I
     */
    JNIEXPORT jint JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getNumTriangle
    (JNIEnv *env, jclass clazz, jlong bodyId) {
        btSoftBody* body = reinterpret_cast<btSoftBody*> (bodyId);
        if (body == NULL) {
            jclass newExc = env->FindClass("java/lang/NullPointerException");
            env->ThrowNew(newExc, "The native object does not exist.");
            return 0;
        }
        return body->m_faces.size();
    }

    /*
     * Class:     com_jme3_bullet_util_NativeSoftBodyUtil
     * Method:    updateMesh
     * Signature: (JLjava/nio/FloatBuffer;ZZLjava/nio/FloatBuffer;)V
     */
    JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_updateMesh
    (JNIEnv *env, jclass clazz, jlong bodyId, jobject verticesBuffer, jboolean meshInLocalOrigin, jboolean doNormalUpdate, jobject normalsBuffer) {
        btSoftBody* body = reinterpret_cast<btSoftBody*> (bodyId);
        if (body == NULL) {
            jclass newExc = env->FindClass("java/lang/NullPointerException");
            env->ThrowNew(newExc, "The native object does not exist.");
            return;
        }

        jfloat* vertices = (jfloat*) env->GetDirectBufferAddress(verticesBuffer);

        btVector3 center = btVector3(0, 0, 0);
        if (meshInLocalOrigin) {
            center = getBoundingCenter(body);
        }

        if (doNormalUpdate) {
            jfloat* normals = (jfloat*) env->GetDirectBufferAddress(normalsBuffer);

            for (int i = 0; i < body->m_nodes.size(); ++i) {
                const btSoftBody::Node& n = body->m_nodes[i];
                vertices[i * 3 + 0] = n.m_x.getX() - center.getX();
                vertices[i * 3 + 1] = n.m_x.getY() - center.getY();
                vertices[i * 3 + 2] = n.m_x.getZ() - center.getZ();
                //--- normals
                normals[i * 3 + 0] = n.m_n.getX();
                normals[i * 3 + 1] = n.m_n.getY();
                normals[i * 3 + 2] = n.m_n.getZ();
            }
        } else {
            for (int i = 0; i < body->m_nodes.size(); ++i) {
                const btSoftBody::Node& n = body->m_nodes[i];
                vertices[i * 3 + 0] = n.m_x.getX() - center.getX();
                vertices[i * 3 + 1] = n.m_x.getY() - center.getY();
                vertices[i * 3 + 2] = n.m_x.getZ() - center.getZ();
            }
        }
    }

#ifdef __cplusplus
}
#endif
#endif
